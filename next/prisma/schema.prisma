generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                 String                              @id @default(cuid())
  handle                             String                              @unique @default(cuid())
  email                              String                              @unique
  name                               String
  image                              String
  profile                            String                              @default("")
  twitterHandle                      String                              @default("")
  plan                               String                              @default("free")
  totalPoints                        Int                                 @default(0) @map("total_points")
  isAI                               Boolean                             @default(false) @map("is_ai")
  provider                           String                              @default("Credentials")
  createdAt                          DateTime                            @default(now()) @map("created_at")
  updatedAt                          DateTime                            @updatedAt @map("updated_at")
  emailVerified                      DateTime?
  credential                         UserCredential?
  geminiApiKey                       GeminiApiKey?
  pages                              Page[]
  pageSegmentsTranslations           PageSegmentTranslation[]
  votes                              Vote[]
  likePages                          LikePage[]
  followers                          Follow[]                            @relation("following")
  following                          Follow[]                            @relation("follower")
  pageComments                       PageComment[]
  pageCommentSegmentTranslations     PageCommentSegmentTranslation[]
  pageCommentSegmentTranslationVotes PageCommentSegmentTranslationVote[]
  projects                           Project[]
  accounts                           Account[]
  sessions                           Session[]
  notifications                      Notification[]                      @relation("UserNotifications")
  actedNotifications                 Notification[]                      @relation("NotificationActor")
  projectLikes                       ProjectLike[]
  projectSegmentTranslations         ProjectSegmentTranslation[]
  projectSegmentTranslationVotes     ProjectSegmentTranslationVote[]
  translationJobs                    TranslationJob[]

  @@map("users")
}

model UserCredential {
  id       Int    @id @default(autoincrement())
  password String
  userId   String @unique @map("user_id")
  user     User   @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("user_credentials")
}

model GeminiApiKey {
  id     Int    @id @default(autoincrement())
  apiKey String @default("") @map("api_key")
  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("gemini_api_keys")
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  String   @map("follower_id")
  followingId String   @map("following_id")
  createdAt   DateTime @default(now()) @map("created_at")
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

enum TranslationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

model TranslationJob {
  id        Int      @id @default(autoincrement())
  pageId    Int?
  projectId String?
  // リレーション
  page      Page?    @relation(fields: [pageId], references: [id], onDelete: Cascade)
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  userId    String?
  user      User?             @relation(fields: [userId], references: [id])
  locale    String
  aiModel   String
  status    TranslationStatus @default(PENDING)
  progress  Int               @default(0)
  error     String            @default("")
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@index([userId])
}

enum PageStatus {
  DRAFT
  PUBLIC
  ARCHIVE
}

model Page {
  id              Int              @id @default(autoincrement())
  slug            String           @unique
  content         String
  mdastJson       Json?            @map("mdast_json")
  sourceLocale    String           @default("unknown") @map("source_locale")
  status          PageStatus       @default(DRAFT)
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String           @map("user_id")
  pageSegments    PageSegment[]
  tagPages        TagPage[]
  likePages       LikePage[]
  pageComments    PageComment[]
  notifications   Notification[]
  translationJobs TranslationJob[]

  @@index([createdAt])
  @@index([userId])
  @@index([slug])
  @@map("pages")
}

model PageSegment {
  id                      Int                      @id @default(autoincrement())
  text                    String
  number                  Int
  textAndOccurrenceHash   String                   @map("text_and_occurrence_hash")
  pageSegmentTranslations PageSegmentTranslation[]
  page                    Page                     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId                  Int                      @map("page_id")
  createdAt               DateTime                 @default(now()) @map("created_at")
  updatedAt               DateTime                 @updatedAt @map("updated_at")

  @@unique([pageId, number])
  @@unique([pageId, textAndOccurrenceHash])
  @@index([pageId])
  @@index([number])
  @@index([textAndOccurrenceHash])
  @@map("page_segments")
}

model PageSegmentTranslation {
  id            Int            @id @default(autoincrement())
  locale        String
  text          String
  pageSegmentId Int            @map("page_segment_id")
  userId        String         @map("user_id")
  point         Int            @default(0)
  isArchived    Boolean        @default(false) @map("is_archived")
  createdAt     DateTime       @default(now()) @map("created_at")
  pageSegment   PageSegment    @relation(fields: [pageSegmentId], references: [id], onDelete: Cascade)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes         Vote[]
  notifications Notification[]

  @@index([pageSegmentId])
  @@index([userId])
  @@index([locale])
  @@index([locale, isArchived])
  @@index([pageSegmentId, locale, isArchived])
  @@index([point, createdAt])
  @@map("page_segment_translations")
}

model LikePage {
  id        Int      @id @default(autoincrement())
  userId    String?  @map("user_id")
  guestId   String?  @map("guest_id")
  pageId    Int      @map("page_id")
  createdAt DateTime @default(now()) @map("created_at")
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@unique([userId, pageId])
  @@unique([guestId, pageId])
  @@index([userId])
  @@index([pageId])
  @@map("like_pages")
}

model Tag {
  id    Int       @id @default(autoincrement())
  name  String    @unique
  pages TagPage[]

  @@index([name])
  @@map("tags")
}

model TagPage {
  tagId  Int
  pageId Int
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  page   Page @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@id([tagId, pageId])
  @@index([tagId])
  @@index([pageId])
  @@map("tag_pages")
}

model Vote {
  id                       Int                    @id @default(autoincrement())
  userId                   String                 @map("user_id")
  pageSegmentTranslationId Int                    @map("page_segment_translation_id")
  isUpvote                 Boolean                @map("is_upvote")
  createdAt                DateTime               @default(now()) @map("created_at")
  updatedAt                DateTime               @updatedAt @map("updated_at")
  pageSegmentTranslation   PageSegmentTranslation @relation(fields: [pageSegmentTranslationId], references: [id], onDelete: Cascade)
  user                     User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pageSegmentTranslationId, userId])
  @@index([pageSegmentTranslationId])
  @@index([userId])
  @@map("votes")
}

model PageComment {
  id                  Int                  @id @default(autoincrement())
  content             String
  mdastJson       Json?            @map("mdast_json")
  locale              String
  userId              String               @map("user_id")
  pageId              Int                  @map("page_id")
  parentId            Int?                 @map("parent_id")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  page                Page                 @relation(fields: [pageId], references: [id], onDelete: Cascade)
  parent              PageComment?         @relation("CommentReplies", fields: [parentId], references: [id], onDelete: SetNull)
  replies             PageComment[]        @relation("CommentReplies")
  pageCommentSegments PageCommentSegment[]
  notifications       Notification[]

  @@index([userId])
  @@index([pageId])
  @@index([createdAt])
  @@map("page_comments")
}

model PageCommentSegment {
  id                             Int                             @id @default(autoincrement())
  text                           String
  number                         Int
  textAndOccurrenceHash          String                          @map("text_and_occurrence_hash")
  pageCommentId                  Int                             @map("page_comment_id")
  createdAt                      DateTime                        @default(now()) @map("created_at")
  updatedAt                      DateTime                        @updatedAt @map("updated_at")
  pageComment                    PageComment                     @relation(fields: [pageCommentId], references: [id], onDelete: Cascade)
  pageCommentSegmentTranslations PageCommentSegmentTranslation[]

  @@unique([pageCommentId, number])
  @@unique([pageCommentId, textAndOccurrenceHash])
  @@index([pageCommentId])
  @@index([textAndOccurrenceHash])
  @@map("page_comment_segments")
}

model PageCommentSegmentTranslation {
  id                                 Int                                 @id @default(autoincrement())
  locale                             String
  text                               String
  userId                             String                              @map("user_id")
  point                              Int                                 @default(0)
  createdAt                          DateTime                            @default(now()) @map("created_at")
  updatedAt                          DateTime                            @updatedAt @map("updated_at")
  user                               User                                @relation(fields: [userId], references: [id], onDelete: Cascade)
  pageCommentSegmentId               Int                                 @map("page_comment_segment_id")
  pageCommentSegment                 PageCommentSegment                  @relation(fields: [pageCommentSegmentId], references: [id], onDelete: Cascade)
  pageCommentSegmentTranslationVotes PageCommentSegmentTranslationVote[]
  notifications                      Notification[]

  @@index([pageCommentSegmentId])
  @@index([userId])
  @@index([locale])
  @@map("page_comment_segment_translations")
}

model PageCommentSegmentTranslationVote {
  id                              Int                           @id @default(autoincrement())
  userId                          String                        @map("user_id")
  pageCommentSegmentTranslationId Int                           @map("page_comment_segment_translation_id")
  isUpvote                        Boolean                       @map("is_upvote")
  createdAt                       DateTime                      @default(now()) @map("created_at")
  updatedAt                       DateTime                      @updatedAt @map("updated_at")
  pageCommentSegmentTranslation   PageCommentSegmentTranslation @relation(fields: [pageCommentSegmentTranslationId], references: [id], onDelete: Cascade)
  user                            User                          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pageCommentSegmentTranslationId, userId])
  @@index([pageCommentSegmentTranslationId])
  @@index([userId])
  @@map("page_comment_segment_translation_votes")
}

model Project {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  title        String
  description  String   @db.Text
  mdastJson       Json?            @map("mdast_json")
  sourceLocale String   @default("unknown") @map("source_locale")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  iconImageId  String?  @unique @map("icon_image_id")

  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  links               ProjectLink[]
  images              ProjectImage[]       @relation("ProjectImages")
  projectTagRelations ProjectTagRelation[]
  projectLikes        ProjectLike[]
  projectSegments     ProjectSegment[]
  translationJobs     TranslationJob[]
  iconImage           ProjectImage?        @relation("ProjectIcon", fields: [iconImageId], references: [id], onDelete: SetNull)

  @@map("projects")
}

model ProjectLink {
  id          String @id @default(cuid())
  projectId   String @map("project_id")
  description String @default("")
  url         String

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_links")
}

model ProjectImage {
  id        String @id @default(cuid())
  projectId String @map("project_id")
  url       String
  caption   String @default("")
  order     Int    @default(0)

  project     Project  @relation("ProjectImages", fields: [projectId], references: [id], onDelete: Cascade)
  projectIcon Project? @relation("ProjectIcon")

  @@map("project_images")
}

model ProjectTag {
  id                  String               @id @default(cuid())
  name                String               @unique
  projectTagRelations ProjectTagRelation[]

  @@map("project_tags")
}

model ProjectTagRelation {
  projectId    String @map("project_id")
  projectTagId String @map("project_tag_id")

  project    Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectTag ProjectTag @relation(fields: [projectTagId], references: [id], onDelete: Cascade)

  @@id([projectId, projectTagId])
  @@map("project_tag_relations")
}

model ProjectLike {
  id        String   @id @default(cuid())
  projectId String   @map("project_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("project_likes")
}

model ProjectSegment {
  id                         Int                         @id @default(autoincrement())
  text                       String
  number                     Int
  textAndOccurrenceHash      String                      @map("text_and_occurrence_hash")
  projectSegmentTranslations ProjectSegmentTranslation[]
  project                    Project                     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId                  String                      @map("project_id")
  createdAt                  DateTime                    @default(now()) @map("created_at")
  updatedAt                  DateTime                    @updatedAt @map("updated_at")

  @@unique([projectId, number])
  @@unique([projectId, textAndOccurrenceHash])
  @@index([projectId])
  @@index([number])
  @@index([textAndOccurrenceHash])
  @@map("project_segments")
}

model ProjectSegmentTranslation {
  id                             Int                             @id @default(autoincrement())
  locale                         String
  text                           String
  projectSegmentId               Int                             @map("project_segment_id")
  userId                         String                          @map("user_id")
  point                          Int                             @default(0)
  isArchived                     Boolean                         @default(false) @map("is_archived")
  createdAt                      DateTime                        @default(now()) @map("created_at")
  projectSegment                 ProjectSegment                  @relation(fields: [projectSegmentId], references: [id], onDelete: Cascade)
  user                           User                            @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectSegmentTranslationVotes ProjectSegmentTranslationVote[]

  @@index([projectSegmentId])
  @@index([userId])
  @@index([locale])
  @@index([locale, isArchived])
  @@index([projectSegmentId, locale, isArchived])
  @@index([point, createdAt])
  @@map("project_segment_translations")
}

model ProjectSegmentTranslationVote {
  id                          Int                       @id @default(autoincrement())
  userId                      String                    @map("user_id")
  projectSegmentTranslationId Int                       @map("project_segment_translation_id")
  isUpvote                    Boolean                   @map("is_upvote")
  createdAt                   DateTime                  @default(now()) @map("created_at")
  updatedAt                   DateTime                  @updatedAt @map("updated_at")
  projectSegmentTranslation   ProjectSegmentTranslation @relation(fields: [projectSegmentTranslationId], references: [id], onDelete: Cascade)
  user                        User                      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectSegmentTranslationId, userId])
  @@index([projectSegmentTranslationId])
  @@index([userId])
  @@map("project_segment_translation_votes")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

enum NotificationType {
  FOLLOW
  PAGE_COMMENT
  PAGE_LIKE
  PAGE_SEGMENT_TRANSLATION_VOTE
  PAGE_COMMENT_SEGMENT_TRANSLATION_VOTE
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    String           @map("user_id")
  actorId   String           @map("actor_id")
  type      NotificationType
  read      Boolean          @default(false)
  createdAt DateTime         @default(now()) @map("created_at")

  pageId                          Int? @map("page_id")
  pageCommentId                   Int? @map("page_comment_id")
  pageSegmentTranslationId        Int? @map("page_segment_translation_id")
  pageCommentSegmentTranslationId Int? @map("page_comment_segment_translation_id")

  user  User @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  actor User @relation("NotificationActor", fields: [actorId], references: [id], onDelete: Cascade)

  page                          Page?                          @relation(fields: [pageId], references: [id])
  pageComment                   PageComment?                   @relation(fields: [pageCommentId], references: [id])
  pageSegmentTranslation        PageSegmentTranslation?        @relation(fields: [pageSegmentTranslationId], references: [id])
  pageCommentSegmentTranslation PageCommentSegmentTranslation? @relation(fields: [pageCommentSegmentTranslationId], references: [id])

  @@index([userId])
  @@index([actorId])
  @@map("notifications")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

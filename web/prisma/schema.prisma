generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                     @id @default(autoincrement())
  email                 String                  @unique
  password              String?
  name                  String
  image                 String
  plan                  String                  @default("free")
  totalPoints           Int                     @default(0) @map("total_points")
  isAI                  Boolean                 @default(false) @map("is_ai")
  provider              String                  @default("Credentials")
  geminiApiKey          String?                 @map("gemini_api_key")
  openAIApiKey          String?                 @map("openai_api_key")
  claudeApiKey          String?                 @map("claude_api_key")
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  userReadHistory       UserReadHistory[]
  apiUsages             ApiUsage[]
  translations          TranslateText[]
  votes                 Vote[]
  userAITranslationInfo UserAITranslationInfo[]
  customAIModels        CustomAIModel[]

  @@map("users")
}

model UserAITranslationInfo {
  id                    Int      @id @default(autoincrement())
  userId                Int      @map("user_id")
  slug                   String   @default("unknown")
  targetLanguage        String   @map("target_language")
  aiTranslationStatus   String   @default("pending") @map("ai_translation_status")
  aiTranslationProgress Int      @default(0) @map("ai_translation_progress")
  lastTranslatedAt      DateTime @default(now()) @map("last_translated_at")
  user                  User     @relation(fields: [userId], references: [id])

  @@unique([userId, slug, targetLanguage])
  @@index([userId])
  @@map("user_ai_translation_info")
}

model UserReadHistory {
  id                 Int      @id @default(autoincrement())
  userId             Int      @map("user_id")
  pageId             Int      @map("page_id")
  readAt             DateTime @default(now()) @map("read_at")
  lastReadDataNumber Int      @default(0) @map("last_read_data_number")
  user               User     @relation(fields: [userId], references: [id])
  page               Page     @relation(fields: [pageId], references: [id])

  @@unique([userId, pageId])
  @@index([userId])
  @@index([pageId])
  @@map("user_read_history")
}

model PageTranslationInfo {
  id               Int    @id @default(autoincrement())
  pageId           Int    @map("page_id")
  targetLanguage   String @map("target_language")
  translationTitle String @map("translation_title")
  page             Page   @relation(fields: [pageId], references: [id])

  @@unique([pageId, targetLanguage])
  @@map("page_translation_info")
}

model Page {
  id                  Int                   @id @default(autoincrement())
  slug                String                @unique
  sourceUrl           String?               @map("source_url")
  title               String
  content             String
  contentHash         Bytes                 @unique @map("content_hash")
  license             String                @default("unknown")
  originalLanguage    String                @default("unknown") @map("original_language")
  createdAt           DateTime              @default(now()) @map("created_at")
  pageSourceTexts     PageSourceText[]
  pageTranslationInfo PageTranslationInfo[]
  userReadHistory     UserReadHistory[]
  authors             AuthorPage[]
  genres              GenrePage[]
  tags                TagPage[]

  @@map("pages")
}

model Author {
  id    Int          @id @default(autoincrement())
  name  String
  pages AuthorPage[]

  @@map("authors")
}

model AuthorPage {
  authorId Int
  pageId   Int
  author   Author @relation(fields: [authorId], references: [id])
  page     Page   @relation(fields: [pageId], references: [id])

  @@id([authorId, pageId])
  @@map("author_pages")
}

model Genre {
  id    Int         @id @default(autoincrement())
  name  String      @unique
  pages GenrePage[]

  @@map("genres")
}

model GenrePage {
  genreId Int
  pageId  Int
  genre   Genre @relation(fields: [genreId], references: [id])
  page    Page  @relation(fields: [pageId], references: [id])

  @@id([genreId, pageId])
  @@map("genre_pages")
}

model Tag {
  id    Int       @id @default(autoincrement())
  name  String    @unique
  pages TagPage[]

  @@map("tags")
}

model TagPage {
  tagId  Int
  pageId Int
  tag    Tag  @relation(fields: [tagId], references: [id])
  page   Page @relation(fields: [pageId], references: [id])

  @@id([tagId, pageId])
  @@map("tag_pages")
}

model SourceText {
  id              Int              @id @default(autoincrement())
  text            String
  number          Int
  textHash        Bytes            @map("text_hash")
  translateTexts  TranslateText[]
  pageSourceTexts PageSourceText[]

  @@unique([textHash, number])
  @@index([textHash, number])
  @@map("source_texts")
}

model PageSourceText {
  id           Int @id @default(autoincrement())
  pageId       Int @map("page_id")
  sourceTextId Int @map("source_text_id")

  page       Page       @relation(fields: [pageId], references: [id])
  sourceText SourceText @relation(fields: [sourceTextId], references: [id])

  @@unique([pageId, sourceTextId])
  @@index([pageId])
  @@map("page_source_texts")
}

model TranslateText {
  id             Int        @id @default(autoincrement())
  targetLanguage String
  text           String
  sourceTextId   Int        @map("source_text_id")
  userId         Int        @map("user_id")
  point          Int        @default(0)
  editCount      Int        @default(0) @map("edit_count")
  createdAt      DateTime   @default(now()) @map("created_at")
  sourceText     SourceText @relation(fields: [sourceTextId], references: [id])
  user           User       @relation(fields: [userId], references: [id])
  votes          Vote[]

  @@map("translate_texts")
}

model Vote {
  id              Int           @id @default(autoincrement())
  userId          Int           @map("user_id")
  translateTextId Int           @map("translate_text_id")
  isUpvote        Boolean       @map("is_upvote")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  translateText   TranslateText @relation(fields: [translateTextId], references: [id])
  user            User          @relation(fields: [userId], references: [id])

  @@unique([translateTextId, userId])
  @@map("votes")
}

model ApiUsage {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  dateTime   DateTime @map("date_time")
  amountUsed Int      @map("amount_used")
  user       User     @relation(fields: [userId], references: [id])

  @@map("api_usage")
}

model CustomAIModel {
  id        String   @id @default(cuid())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  name      String
  apiKey    String
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                             String                             @id @default(cuid())
  handle                         String                          @unique
  email                          String                          @unique
  name                           String
  image                          String
  profile                        String                          @default("")
  plan                           String                          @default("free")
  totalPoints                    Int                             @default(0) @map("total_points")
  isAI                           Boolean                         @default(false) @map("is_ai")
  provider                       String                          @default("Credentials")
  createdAt                      DateTime                        @default(now()) @map("created_at")
  updatedAt                      DateTime                        @updatedAt @map("updated_at")
  credential                     UserCredential?
  geminiApiKey                   GeminiApiKey?
  pages                          Page[]
  pageSegmentsTranslations       PageSegmentTranslation[]
  votes                          Vote[]
  userAITranslationInfo          UserAITranslationInfo[]
  likePages                      LikePage[]
  followers                      Follow[]                        @relation("following")
  following                      Follow[]                        @relation("follower")
  pageComments                   PageComment[]
  pageCommentSegmentTranslations PageCommentSegmentTranslation[]
  pageCommentSegmentTranslationVotes PageCommentSegmentTranslationVote[]
  @@map("users")
}

model UserCredential {
  id       Int    @id @default(autoincrement())
  password String
  userId   String    @unique @map("user_id")
  user     User   @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("user_credentials")
}

model GeminiApiKey {
  id     Int    @id @default(autoincrement())
  apiKey String @default("") @map("api_key")
  userId String    @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("gemini_api_keys")
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  String      @map("follower_id")
  followingId String      @map("following_id")
  createdAt   DateTime @default(now()) @map("created_at")
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

enum TranslationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

model UserAITranslationInfo {
  id                    Int               @id @default(autoincrement())
  userId                String               @map("user_id")
  pageId                Int               @map("page_id")
  locale                String
  aiModel               String            @map("ai_model")
  aiTranslationStatus   TranslationStatus @default(PENDING) @map("ai_translation_status")
  aiTranslationProgress Int               @default(0) @map("ai_translation_progress")
  createdAt             DateTime          @default(now()) @map("created_at")
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  page                  Page              @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([pageId])
  @@index([pageId, locale])
  @@map("user_ai_translation_info")
}

enum PageStatus {
  DRAFT
  PUBLIC
  ARCHIVE
}

model Page {
  id                    Int                     @id @default(autoincrement())
  slug                  String                  @unique
  content               String
  sourceLocale          String                  @default("unknown") @map("source_locale")
  status                PageStatus              @default(DRAFT)
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  user                  User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String                  @map("user_id")
  userAITranslationInfo UserAITranslationInfo[]
  pageSegments          PageSegment[]
  tagPages              TagPage[]
  likePages             LikePage[]
  pageComments          PageComment[]

  @@index([createdAt])
  @@index([userId])
  @@index([slug])
  @@map("pages")
}

model PageSegment {
  id                    Int             @id @default(autoincrement())
  text                  String
  number                Int
  textAndOccurrenceHash String          @map("text_and_occurrence_hash")
  pageSegmentTranslations PageSegmentTranslation[]
  page                  Page            @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId                Int             @map("page_id")
  createdAt             DateTime        @default(now()) @map("created_at")
  updatedAt             DateTime        @updatedAt @map("updated_at")

  @@unique([pageId, number])
  @@unique([pageId, textAndOccurrenceHash])
  @@index([pageId])
  @@index([number])
  @@index([textAndOccurrenceHash])
  @@map("page_segments")
}

model PageSegmentTranslation {
  id           Int        @id @default(autoincrement())
  locale       String
  text         String
  pageSegmentId Int        @map("page_segment_id")
  userId       String        @map("user_id")
  point        Int        @default(0)
  isArchived   Boolean    @default(false) @map("is_archived")
  createdAt    DateTime   @default(now()) @map("created_at")
  pageSegment  PageSegment @relation(fields: [pageSegmentId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes        Vote[]

  @@index([pageSegmentId])
  @@index([userId])
  @@index([locale])
  @@map("page_segment_translations")
}

model LikePage {
  id        Int      @id @default(autoincrement())
  userId    String?     @map("user_id")
  guestId   String?  @map("guest_id")
  pageId    Int      @map("page_id")
  createdAt DateTime @default(now()) @map("created_at")
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@unique([userId, pageId])
  @@unique([guestId, pageId])
  @@index([userId])
  @@index([pageId])
  @@map("like_pages")
}

model Tag {
  id    Int       @id @default(autoincrement())
  name  String    @unique
  pages TagPage[]

  @@index([name])
  @@map("tags")
}

model TagPage {
  tagId  Int
  pageId Int
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  page   Page @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@id([tagId, pageId])
  @@index([tagId])
  @@index([pageId])
  @@map("tag_pages")
}

model Vote {
  id              Int           @id @default(autoincrement())
  userId          String           @map("user_id")
  pageSegmentTranslationId Int           @map("page_segment_translation_id")
  isUpvote        Boolean       @map("is_upvote")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  pageSegmentTranslation PageSegmentTranslation @relation(fields: [pageSegmentTranslationId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pageSegmentTranslationId, userId])
  @@index([pageSegmentTranslationId])
  @@index([userId])
  @@map("votes")
}

model PageComment {
  id                  Int                  @id @default(autoincrement())
  content             String
  locale              String
  userId              String                  @map("user_id")
  pageId              Int                  @map("page_id")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  page                Page                 @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageCommentSegments PageCommentSegment[]

  @@index([userId])
  @@index([pageId])
  @@index([createdAt])
  @@map("page_comments")
}

model PageCommentSegment {
  id                             Int                             @id @default(autoincrement())
  text                           String
  number                         Int
  textAndOccurrenceHash          String                          @map("text_and_occurrence_hash")
  pageCommentId                  Int                             @map("page_comment_id")
  createdAt                      DateTime                        @default(now()) @map("created_at")
  updatedAt                      DateTime                        @updatedAt @map("updated_at")
  pageComment                    PageComment                     @relation(fields: [pageCommentId], references: [id], onDelete: Cascade)
  pageCommentSegmentTranslations PageCommentSegmentTranslation[]

  @@unique([pageCommentId, number])
  @@unique([pageCommentId, textAndOccurrenceHash])
  @@index([pageCommentId])
  @@index([textAndOccurrenceHash])
  @@map("page_comment_segments")
}

model PageCommentSegmentTranslation {
  id                   Int                @id @default(autoincrement())
  locale               String
  text                 String
  userId               String                @map("user_id")
  point                Int                @default(0)
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  pageCommentSegmentId Int                @map("page_comment_segment_id")
  pageCommentSegment   PageCommentSegment @relation(fields: [pageCommentSegmentId], references: [id], onDelete: Cascade)
  pageCommentSegmentTranslationVotes PageCommentSegmentTranslationVote[]
  @@index([pageCommentSegmentId])
  @@index([userId])
  @@index([locale])
  @@map("page_comment_segment_translations")
}

model PageCommentSegmentTranslationVote {
  id              Int           @id @default(autoincrement())
  userId          String           @map("user_id")
  pageCommentSegmentTranslationId Int           @map("page_comment_segment_translation_id")
  isUpvote        Boolean       @map("is_upvote")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  pageCommentSegmentTranslation PageCommentSegmentTranslation @relation(fields: [pageCommentSegmentTranslationId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pageCommentSegmentTranslationId, userId])
  @@index([pageCommentSegmentTranslationId])
  @@index([userId])
  @@map("page_comment_segment_translation_votes")
}
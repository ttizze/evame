generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  handle              String                  @unique
  name           String               
  image                  String
  profile               String                  @default("")
  plan                  String                  @default("free")
  totalPoints           Int                     @default(0) @map("total_points")
  isAI                  Boolean                 @default(false) @map("is_ai")
  provider              String                  @default("Credentials")
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  credential            UserCredential?
  userEmail             UserEmail?
  geminiApiKey          GeminiApiKey?
  pages                 Page[]
  translations          TranslateText[]
  votes                 Vote[]
  userAITranslationInfo UserAITranslationInfo[]
  likePages             LikePage[]
  followers             Follow[]                @relation("following")
  following             Follow[]                @relation("follower")
  comments              Comment[]

  @@index([handle])
  @@map("users")
}

model UserEmail {
  id       Int    @id @default(autoincrement())
  email    String @unique
  userId   Int    @unique @map("user_id")
  user     User   @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("user_emails")
}

model UserCredential {
  id       Int    @id @default(autoincrement())
  password String
  userId   Int    @unique
  user     User   @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("user_credentials")
}

model GeminiApiKey {
  id     Int    @id @default(autoincrement())
  apiKey String @default("") @map("api_key")
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("gemini_api_keys")
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  Int      @map("follower_id")
  followingId Int      @map("following_id")
  createdAt   DateTime @default(now()) @map("created_at")
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

model UserAITranslationInfo {
  id                    Int      @id @default(autoincrement())
  userId                Int      @map("user_id")
  pageId                Int      @map("page_id")
  locale                String
  aiModel               String   @map("ai_model")
  aiTranslationStatus   String   @default("pending") @map("ai_translation_status")
  aiTranslationProgress Int      @default(0) @map("ai_translation_progress")
  createdAt             DateTime @default(now()) @map("created_at")
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  page                  Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([pageId])
  @@index([pageId, locale])
  @@map("user_ai_translation_info")
}


enum PageStatus {
  DRAFT
  PUBLIC
  ARCHIVE
}

model Page {
  id                    Int                     @id @default(autoincrement())
  slug                  String                  @unique
  content               String
  sourceLanguage        String                  @default("unknown")
  status                PageStatus              @default(DRAFT)
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  user                  User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                Int                     @map("user_id")
  userAITranslationInfo UserAITranslationInfo[]
  sourceTexts           SourceText[]
  tagPages              TagPage[]
  likePages             LikePage[]
  comments              Comment[]

  @@index([createdAt])
  @@index([userId])
  @@index([slug])
  @@map("pages")
}

model SourceText {
  id                    Int             @id @default(autoincrement())
  text                  String
  number                Int
  textAndOccurrenceHash String          @map("text_and_occurrence_hash")
  translateTexts        TranslateText[]
  page                  Page            @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId                Int             @map("page_id")
  createdAt             DateTime        @default(now()) @map("created_at")
  updatedAt             DateTime        @updatedAt @map("updated_at")

  @@unique([pageId, number])
  @@unique([pageId, textAndOccurrenceHash])
  @@index([pageId])
  @@index([number])
  @@index([textAndOccurrenceHash])
  @@map("source_texts")
}

model TranslateText {
  id           Int        @id @default(autoincrement())
  locale       String
  text         String
  sourceTextId Int        @map("source_text_id")
  userId       Int        @map("user_id")
  point        Int        @default(0)
  isArchived   Boolean    @default(false) @map("is_archived")
  createdAt    DateTime   @default(now()) @map("created_at")
  sourceText   SourceText @relation(fields: [sourceTextId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes        Vote[]

  @@index([sourceTextId])
  @@index([userId])
  @@index([locale])
  @@map("translate_texts")
}

model LikePage {
  id        Int      @id @default(autoincrement())
  userId    Int?     @map("user_id")
  guestId   String?  @map("guest_id")
  pageId    Int      @map("page_id")
  createdAt DateTime @default(now()) @map("created_at")
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@unique([userId, pageId])
  @@unique([guestId, pageId])
  @@index([userId])
  @@index([pageId])
  @@map("like_pages")
}



model Tag {
  id    Int       @id @default(autoincrement())
  name  String    @unique
  pages TagPage[]

  @@index([name])
  @@map("tags")
}

model TagPage {
  tagId  Int
  pageId Int
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  page   Page @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@id([tagId, pageId])
  @@index([tagId])
  @@index([pageId])
  @@map("tag_pages")
}

model Vote {
  id              Int           @id @default(autoincrement())
  userId          Int           @map("user_id")
  translateTextId Int           @map("translate_text_id")
  isUpvote        Boolean       @map("is_upvote")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  translateText   TranslateText @relation(fields: [translateTextId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([translateTextId, userId])
  @@index([translateTextId])
  @@index([userId])
  @@map("votes")
}


model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  userId    Int      @map("user_id")
  pageId    Int      @map("page_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([pageId])
  @@index([createdAt])
  @@map("comments")
}

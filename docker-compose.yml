services:
  neon:
    image: postgres:17
    command: '-d 1'
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - '5434:5432'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=main
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  neon-proxy:
    image: ghcr.io/timowilhelm/local-neon-http-proxy:main
    environment:
      - PG_CONNECTION_STRING=postgres://postgres:postgres@neon:5432/main
    ports:
      - '4444:4444'
    depends_on:
      neon:
        condition: service_healthy
  test_neon:
    image: postgres:17
    command: '-d 1'
    volumes:
      - test_db_data:/var/lib/postgresql/data
    ports:
      - '5435:5432'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=main
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  test_neon_proxy:
    image: ghcr.io/timowilhelm/local-neon-http-proxy:main
    environment:
      - PG_CONNECTION_STRING=postgres://postgres:postgres@test_neon:5432/main
    ports:
      - '4445:4444'
    depends_on:
      test_neon:
        condition: service_healthy

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 5s
      timeout: 3s
      retries: 20

  mc:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 minioadmin minioadmin;
      mc mb -p myminio/evame || true;
      mc anonymous set public myminio/evame;
      tail -f /dev/null
      "

  qstash:
    image: public.ecr.aws/upstash/qstash:latest
    command: ["qstash", "dev"]
    ports:
      - "8080:8080"
    # Ensure the container can resolve the host machine as host.docker.internal
    # so it can deliver webhooks to Next.js at http://host.docker.internal:3000
    extra_hosts:
      - "host.docker.internal:host-gateway"

volumes:
  redis:
    driver: local
  minio_data:
    driver: local
  db_data:
    driver: local
  test_db_data:
    driver: local
